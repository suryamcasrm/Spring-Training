
Tight Coupling and Loose coupling

Cart and Order

Constructor/Method(Setter) can be Injected

with XML,Anotations,java config,Spring Boot..etc

through ref <- obj(XML Beans)


Jars
Proj Structure
Def Dependencies(Cons/Setter)
xml config
Client Prog (call xml, ObjFac, fac.bean,Typecast)

Java -> JDK(jre,jvm)
Spring -> IOC container(life cycle of bean obj)
FilePath,ClassPath,Webaplication


Class will have SBI

-----------------------------------------------------

Day 2
------------------------------------------------------

Spring- Lightweight,IOC,AOP

Constructor inj,Setter Inj with Collections(List,Set,Map)
List--duplicate------<value>

Set-No duplicate------<value>
 <set>
 <value>CapG</value>
 <value>RBC</value>
 <value>TL</value>
 </set>

Map- Key value-----<entry>
<property name="Emp">
	<map>
<entry key="Age" value="30" />
	</map>

autowiring- to reduce no of xml tags

----------------------------------------------------------

Day 3

----------------------------------------------------------
MartinFowler.com

Spring boot
-----------------
->uses annotations(limited)
->Reduces maven dependencies
->uber jar strategy
->inbuilt server starters
->reduces no of configaration classes

web way
----------
http://start.spring.io/

spring run c://springboot/cli/app.groovy -- --server.port=8090

------------------------------------------------------------------------

Day5
------------------------------------------------------------

starters...dependecies....spring boot....autoconfiguration
debug mode--- properties
Properties....YML...xml

yamllint.com----validate yml code

Profiling
-----------

@profile({"UAT"})

Live Reload-dev tools
health checkup

-----------------------------------------------------
Day6
---------------------------------------------------------
Spring MVC

JSP as controller---1.x
servlet as controller---1.1

Architecture
----------------------------------------------------------------------------------------------------
Req -> Dispacher Servlet -> Handler Mapping -> Controller -> View Resolver -> ModelandView -> View
----------------------------------------------------------------------------------------------------




